===================================== ANNOTATIONS =============================================

@RestController = define que a classe é uma controladora Rest
@RequestMapping = define qual a URL que o controlador vai responder (endpoint)
@GetMapping = define que o método será do tipo GET
@PostMapping = define que o método será do tipo POST
@RequestBody = define que a variável a seguir é o corpo da requisição
@Autowired = usado para fazer a injeção de dependências
@Getter = usado para criar os getters (em tempo de compilação)
@NoArgsConstructor = usado para criar o construtor básico, necessário para o JPA 
	(sem argumentos)
@AllArgsConstructor = usado para criar o construtor básico, necessário para o JPA 
	(com argumentos)
@EqualsAndHashCode(of = "id") = cria HashCode para a variável 'id'
@Transactional = usado quando tem escrita
@NotBlank = verifica se não é nulo nem vazio, usados apenas em String.
@Valid = indica que o objeto referenciado nessa classe (que vem de outra) também deverá
	ser checado. Também é colocado no método que chama o DTO.
@Pattern(regexp = "REGEX AQUI") => usado para definir uma regex específica
@PathVariable = usado para mostrar pro Spring qual é a variável dinâmica do mapping


===================================== CONCEITOS ===============================================
=====> DTO (Data Transfer Object)
	 	Padrão utilizado para transferências REST.
	
=====> Record
		É um recurso que permite representar uma classe imutável, contendo apenas atributos, 
	construtor e métodos de leitura, de uma maneira muito simples e enxuta. Esse tipo de 
	classe se encaixa perfeitamente para representar classes DTO, já que seu objetivo é 
	apenas representar dados que serão recebidos ou devolvidos pela API, sem nenhum tipo 
	de comportamento.
	
=====> Run com migration em modificação	
		Caso modifique uma migration sem parar o Spring, causará um erro que é resolvido com o 
	comando: "delete from flyway_schema_history where success = 0;"
		Caso tenha sido criado tabelas/colunas nesse processo, é preciso apagar o banco e 
	criá-lo novamente com os comandos: 
			Excluindo: drop database vollmed_api;
			Criando: create database vollmed_api;	
		
=====> PUT
		O método PUT substitui todos os atuais dados de um recurso pelos dados passados na requisição, ou seja, estamos falando de uma atualização integral. Então, com ele, fazemos a atualização total de um recurso em apenas uma requisição.

=====> PATCH
		O método PATCH, por sua vez, aplica modificações parciais em um recurso. Logo, é possível modificar apenas uma parte de um recurso. Com o PATCH, então, realizamos atualizações parciais, o que torna as opções de atualização mais flexíveis.

=====> Qual escolher?
		Na prática, é difícil saber qual método utilizar, pois nem sempre saberemos se um 
		recurso será atualizado parcialmente ou totalmente em uma requisição - a não ser 
		que realizemos uma verificação quanto a isso, algo que não é recomendado.

		O mais comum então nas aplicações é utilizar o método PUT para requisições de 
		atualização de recursos em uma API, sendo essa a nossa escolha no projeto 
		utilizado ao longo deste curso.